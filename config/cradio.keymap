/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define SYMBOLS 1
#define FUNC    2
#define NUMBER  3

&mt {
  // flavor = "tap-preferred";
  // tapping_term_ms = <200>;
};

/* behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    }; */

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
           bindings = <
           &kp Q  &kp W  &kp F  &kp P       &kp B      &kp J       &kp L  &kp U     &kp Y    &kp BKSP
           &kp A  &kp R  &kp S  &kp T       &kp G      &kp M       &kp N  &kp E     &kp I    &kp O
           &kp Z  &kp X  &kp C  &kp D       &kp V      &kp K       &kp H  &kp CMMA  &kp DOT  &mt ENTER
                                &mo NUMBER  &kp SPC    &mo SYMBOLS &mo FUNC
           >;
        };

      symbols_layer {
          bindings = <
          &kp DQT    &kp AT     &kp EXCL   &kp PLUS   &kp NON_US_BSLH  &kp LPAR   &kp RPAR   &kp UNDER  &kp QMARK  &kp NUM_0
          &kp SQT    &kp AMPS   &kp STAR   &kp GRAVE  &kp LBKT         &kp MINUS  &kp TILDE2 &kp EQL    &kp PIPE   &kp NUM_1
          &kp PRCNT  &kp HASH   &kp CARET  &kp DLLR   &kp RBKT         &kp LBRC   &kp RBRC   &kp GT     &kp LT     &kp NUM_2
                                           &kp FSLH   &kp SPC          &trans     &kp NUM_2
          >;
      };

      func_layer {
          bindings = <
          &kp TAB   &kp F1  &kp F2   &kp F3    &kp F4     &kp HOME    &kp PG_UP &kp UP      &kp PG_DN   &kp DEL
          &kp ESC   &kp F5  &kp F6   &kp F7    &kp F8     &kp END     &kp LEFT  &kp DOWN    &kp RIGHT   &kp K_VOL_UP
          &kp CAPS  &kp F9  &kp F10  &kp F10   &kp F12    &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp K_MUTE  &kp K_VOL_DN
                                     &kp NUM_3 &kp SPC    &kp NUM_3   &trans
          >;
      };

      number_layer {
          bindings = <
          &kp NUM_1    &kp NUM_2     &kp NUM_3     &kp NUM_4     &kp NUM_5       &kp NUM_6    &kp NUM_7  &kp NUM_8  &kp NUM_9  &kp NUM_0
          &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans       &kp NUM_4  &kp NUM_5  &kp NUM_6  &trans
          &bt BT_CLR   &trans        &out OUT_TOG  &trans        &bootloader     &bootloader  &kp NUM_1  &kp NUM_2  &kp NUM_3  &kp ENTER
                                                   &trans        &kp SPC         &trans       &kp NUM_0
          >;
      };
    };
};
